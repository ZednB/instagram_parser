import os
import time
import json
import csv

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from dotenv import load_dotenv

load_dotenv('.env')

username = os.getenv('username')
password = os.getenv('password')
instagram_url = os.getenv('instagram_url')


def get_instagram_data(url: str):
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")

    driver = webdriver.Chrome()
    try:
        driver.get(url)
        time.sleep(5)
        try:
            accept_cookies = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "//button[contains(text(), '–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ')]",))
            )
            driver.execute_script("arguments[0].click();", accept_cookies)
            print("Cookies –ø—Ä–∏–Ω—è—Ç—ã —á–µ—Ä–µ–∑ JavaScript")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ cookies:", e)
        time.sleep(2)
        driver.find_element(By.NAME, "username").send_keys(username)
        driver.find_element(By.NAME, "password").send_keys(password + Keys.RETURN)
    except:
        pass
    time.sleep(5)
    print(url)
    try:
        save_info_button = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')]"))
        )
        save_info_button.click()
        print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        time.sleep(5)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
    try:
        stats = driver.find_elements(By.CSS_SELECTOR, "header section ul li span span")
        for i, el in enumerate(stats):
            print(f"{i}: {el.text}")
        time.sleep(5)
        try:
            posts = stats[0].text  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
            followers = stats[2].text  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            following = stats[4].text  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫
            print(f"–ü–æ—Å—Ç–æ–≤: {posts}, –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {followers}, –ü–æ–¥–ø–∏—Å–æ–∫: {following}")
            posts_data = []
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)
            post_links = []
            post_elements = driver.find_elements(By.XPATH, '//a[contains(@href, "/p/") and @role="link"]')
            for el in post_elements:
                time.sleep(3)
                href = el.get_attribute("href")
                if href and href not in post_links:
                    time.sleep(3)
                    post_links.append(href)

            if not post_links:
                print("‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –Ω–µ –¥–æ–≥—Ä—É–∑–∏–ª–∞—Å—å –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥.")
            else:
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(post_links)}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
            for post_url in post_links:
                driver.get(post_url)
                print("post_url:", post_url)
                time.sleep(5)
                try:
                    caption = driver.find_element(By.CSS_SELECTOR, 'h1').text
                except:
                    caption = '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
                try:
                    likes_element = WebDriverWait(driver, 5).until(
                        EC.presence_of_element_located((By.XPATH, '//span[contains(text(),"–æ—Ç–º–µ—Ç–æ–∫")]'))
                    )
                    likes_text = likes_element.text
                    print("–¢–µ–∫—Å—Ç —Å –ª–∞–π–∫–∞–º–∏:", likes_text)
                    # –ù–∞–ø—Ä–∏–º–µ—Ä, "31 –æ—Ç–º–µ—Ç–æ–∫ "–ù—Ä–∞–≤–∏—Ç—Å—è"" -> "31"
                    likes = likes_text.split()[0]
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤:", e)
                    likes = '0'
                try:
                    comments = len(driver.find_elements(By.CSS_SELECTOR, 'ul li'))
                except:
                    comments = '0'
                try:
                    date = driver.find_element(By.TAG_NAME, 'time').get_attribute('datetime')
                except:
                    date = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {caption}, –õ–∞–π–∫–∏: {likes}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments}, –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {date}")
                posts_data.append([caption, likes, comments, date])
                print(caption, likes, comments, date)
            profile_data = {
                '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': int(followers.replace(',', '')),
                '–ü—É–±–ª–∏–∫–∞—Ü–∏–∏': int(posts.replace(',', ''))
            }
            with open('profile_data.json', 'w', encoding='utf-8') as json_file:
                json.dump(profile_data, json_file, ensure_ascii=False, indent=4)
            print('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª')
            print(profile_data, json_file)

            with open('posts.csv', 'w', newline='', encoding='utf-8') as csv_file:
                writer = csv.writer(csv_file)
                writer.writerow(['–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞', '–õ–∞–π–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'])
                writer.writerows(posts_data)
            print('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–∞–π–ª')
            return posts, followers, following
        except IndexError:
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", e)
        return None
    finally:
        driver.quit()


get_instagram_data(instagram_url)
